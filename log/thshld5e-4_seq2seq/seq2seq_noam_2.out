Start reading and get iterators 
NoamOpt (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.98)
    eps: 1e-08
    lr: 0
    weight_decay: 0
)
CELoss()
{'N': 6,
 '_training': True,
 'batchsize': 128,
 'beamsize': 4,
 'ckpt_path': PosixPath('trained_models'),
 'd_ff': 2048,
 'd_model': 512,
 'dataroot': PosixPath('data'),
 'debug': False,
 'device': 'cuda',
 'dropout': 0.3,
 'dropout_tr': 0.1,
 'eps': 1e-08,
 'factor': 0.5,
 'factor_tr': 2,
 'h': 8,
 'hidden_size': 256,
 'learning_rate': 0.001,
 'log_cmd': False,
 'log_path': 'log/seq2seq_optim_adam_0.001_ep50_d1109_t0347',
 'lr_tr': 0,
 'lrschedule': 'noam',
 'max_epoch': 100,
 'max_epochs': 50,
 'metrics': ['bleu', 'meteor', 'cider', 'rouge'],
 'min_lr': 1e-07,
 'mode': 'min',
 'model': 'seq2seq',
 'optimizer': 'adam',
 'patience': 2,
 'pretrained_ep': -1,
 'save_every': 4,
 'threshold': 0.0005,
 'threshold_mode': 'rel',
 'warmup': 6900,
 'word_drop': 0.05}
SOS, EOS, PAD tokens are as follows: (660, 661, 659)
MAX and MIN tokens = 658, 0
epoch: 1  completed
greedy: tensor([646, 366, 280,  57, 237,   7, 183, 449, 333, 391, 333, 192,  73, 556,
        371, 530, 397, 164, 375, 545, 543, 438, 453,  36, 301,  90, 608, 350,
        601,  38, 601, 601, 601, 601, 601,  75, 619, 404, 133, 452, 469, 116,
        551, 479, 368,  39,  60, 279, 583,  38,  76, 453, 395, 652, 652, 592,
         84,  28, 264, 512], device='cuda:0')
beam: tensor([[165, 622,  47, 167,  28, 265, 310, 608, 107, 490, 490, 218, 540, 325,
         554, 358, 467, 467, 267,   2, 585, 472,  77, 242, 534, 562, 271, 525,
         226, 131, 375, 147, 356, 547,  46, 536, 549, 654, 154, 501, 211, 209,
          31,  26, 216, 121, 403, 207, 350,  38, 314, 167, 629, 371,  57, 561,
         546, 467, 654, 154, 654, 154, 501,  82, 389, 187, 638, 325, 195, 307,
         453, 152, 547, 132, 128, 625,   7, 467, 654, 154, 360, 625, 174, 216,
         200, 477,  90,  36, 334, 604,  70, 422, 134, 601,  23, 451,  70, 146,
         335, 148]], device='cuda:0')
epoch: 2  completed
greedy: tensor([646, 366, 540, 661, 661, 661, 181, 414, 147, 152, 583, 311, 307, 307,
        403, 453, 420,  84, 174, 170, 536, 170, 128, 625, 174, 295, 352, 352,
        249, 661, 661, 661, 661, 181, 414, 147, 449,  90, 428, 366, 540, 568,
        602, 568, 602, 568, 602, 215,  83,  83, 512,  70, 512,  70, 512,  70,
        512,  70, 512,  70], device='cuda:0')
beam: tensor([[165, 622,  47, 369, 241,  53,  53,  53,  53, 601,  38,  76,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68]], device='cuda:0')
epoch: 3  completed
greedy: tensor([646, 366, 540, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661,
        661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661,
        661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661,
        661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661,
        661, 661, 661, 661], device='cuda:0')
beam: tensor([[158,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68]], device='cuda:0')
epoch: 4  completed
greedy: tensor([660, 660, 660, 660, 440, 186, 647, 192, 494, 308, 358, 358, 521, 467,
        560,  67,  67,  67,  67,  68,  68,  68,  68,  68,  68,  68,  68,  68,
         68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
         68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
         68,  68,  68,  68], device='cuda:0')
beam: tensor([[165,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68]], device='cuda:0')
saving epoch 4
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.4_loss.5.3488.pth <<<
epoch: 5  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,  68,
          68,  68]], device='cuda:0')
epoch: 6  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661]], device='cuda:0')
epoch: 7  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661]], device='cuda:0')
epoch: 8  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661]], device='cuda:0')
saving epoch 8
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.8_loss.2.9761.pth <<<
epoch: 9  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661]], device='cuda:0')
epoch: 10  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661]], device='cuda:0')
epoch: 11  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661]], device='cuda:0')
epoch: 12  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661]], device='cuda:0')
saving epoch 12
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.12_loss.1.5480.pth <<<
epoch: 13  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661, 661]], device='cuda:0')
epoch: 14  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661, 661, 661]], device='cuda:0')
epoch: 15  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661, 661, 661]], device='cuda:0')
epoch: 16  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661, 661, 661, 661]], device='cuda:0')
saving epoch 16
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.16_loss.0.6332.pth <<<
epoch: 17  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661, 661, 661, 661]], device='cuda:0')
epoch: 18  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661, 661, 661, 661, 661]], device='cuda:0')
epoch: 19  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661, 661, 661, 661, 661]], device='cuda:0')
epoch: 20  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661]],
       device='cuda:0')
saving epoch 20
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.20_loss.0.2501.pth <<<
epoch: 21  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661]],
       device='cuda:0')
epoch: 22  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661]],
       device='cuda:0')
epoch: 23  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661,
         661]], device='cuda:0')
epoch: 24  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         659, 659]], device='cuda:0')
saving epoch 24
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.24_loss.0.1036.pth <<<
epoch: 25  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661]],
       device='cuda:0')
epoch: 26  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661,
         661]], device='cuda:0')
epoch: 27  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 661, 661, 661, 661, 661, 661, 661,
         661, 661]], device='cuda:0')
epoch: 28  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661, 661]],
       device='cuda:0')
saving epoch 28
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.28_loss.0.0493.pth <<<
epoch: 29  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 30  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 31  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 32  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
saving epoch 32
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.32_loss.0.0290.pth <<<
epoch: 33  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 34  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 35  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 36  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
saving epoch 36
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.36_loss.0.0172.pth <<<
epoch: 37  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 38  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 39  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 40  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
saving epoch 40
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.40_loss.0.0111.pth <<<
epoch: 41  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 42  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 43  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 44  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
saving epoch 44
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.44_loss.0.0086.pth <<<
epoch: 45  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 46  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 47  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 48  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
saving epoch 48
>>> Saving MODEL and VOCAB @ trained_models/seq2seq/seq2seq_optim_adam_0.001_ep50_d1109_t0347/ep.48_loss.0.0068.pth <<<
epoch: 49  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
epoch: 50  completed
greedy: tensor([660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
        660, 660, 660, 660], device='cuda:0')
beam: tensor([[660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660, 660,
         660, 660]], device='cuda:0')
Traceback (most recent call last):
  File "main.py", line 63, in <module>
    Fire(Main)
  File "/home/ywjang/miniconda3/envs/write2u/lib/python3.7/site-packages/fire/core.py", line 138, in Fire
    component_trace = _Fire(component, args, parsed_flag_args, context, name)
  File "/home/ywjang/miniconda3/envs/write2u/lib/python3.7/site-packages/fire/core.py", line 471, in _Fire
    target=component.__name__)
  File "/home/ywjang/miniconda3/envs/write2u/lib/python3.7/site-packages/fire/core.py", line 675, in _CallAndUpdateTrace
    component = fn(*varargs, **kwargs)
  File "main.py", line 43, in train
    runtrain(args)
  File "/home/ywjang/miniconda3/envs/write2u/lib/python3.7/contextlib.py", line 119, in __exit__
    next(self.gen)
  File "/home/ywjang/seonil/papago_test/utils.py", line 114, in log_time_n_args
    with (args.log_path / f"{get_dirname_from_args(args)}.time").open(mode = 'w') as f:
TypeError: unsupported operand type(s) for /: 'str' and 'str'
